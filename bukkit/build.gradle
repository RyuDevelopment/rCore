import java.nio.file.Paths

plugins {
    id 'idea'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '1.9.22'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    //id 'org.hidetake.ssh' version '2.11.2'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.viaversion.com"}
    maven { url "https://repo.dmulloy2.net/repository/public/" }
}

dependencies {
    compileOnly project(':m-linker')
    implementation project(':shared')

    implementation 'com.starlight:nexus:1.1-SNAPSHOT'
    implementation 'org.reflections:reflections:0.9.11'
    implementation 'dev.t4yrn.jupiter:jupiter:1.0-SNAPSHOT'
    implementation 'mkremins:fanciful:0.4.0-SNAPSHOT'
    //implementation 'net.luckperms:api:5.4'

    compileOnly 'com.viaversion:viaversion-api:4.9.2'
    compileOnly 'com.comphenix.protocol:ProtocolLib:4.8.0';
    compileOnly 'org.spigotmc:spigot-api:1.8.8-R0.1-SNAPSHOT'
    compileOnly 'dev.yek4h.spigot:Samurai-server:1.8.8-R0.1-SNAPSHOT'

    //compileOnly fileTree(dir: '.lib', include: '*.jar')
}

shadowJar {
    archiveClassifier.set(null)

    exclude "**/*.kotlin_metadata"
    exclude "**/*.kotlin_module"
    exclude "**/*.kotlin_builtins"
    exclude "META-INF/**"

    project.configurations.implementation.canBeResolved = true
    configurations = [project.configurations.implementation]
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset = "UTF-8"
    filesMatching("plugin.yml") {
        expand props
    }
}

publishing {
    publications {
        shadow(MavenPublication) { publication ->
            from components.java

            afterEvaluate {
                artifact(shadowJar) {
                    classifier = 'all'
                }
            }
        }
    }
}

/*
ssh.settings {
    dryRun = project.hasProperty('dryRun')
}

remotes {
    server {
        host = '25.64.169.206'
        user = 'root'
        password = 'leanesgay'
    }
}
 */

def directory = Paths.get(System.getProperty("user.home"), "Desktop", "Ryu Development", ".exported").toString()
def pluginName = "rCore"

tasks.withType(Jar).configureEach {
    destinationDirectory = file(directory)
    archiveFileName = "$pluginName-${project.name}-${project.version}.jar"
    def finalFileName = "$pluginName-${project.name}-${project.version}.jar"
    /*
    doLast {
        ssh.run {
            session(remotes.server) {
                put from: "$directory\\$finalFileName", into: '/home/lean/plugins'
                //put from: "$directory\\$finalFileName", into: '/home/yek4h/test/plugins'
                put from: "$directory\\$finalFileName", into: '/home/deploys/settings/plugins/Core.jar'
                //execute('systemctl restart lean')
            }
        }
    }
    */
}